import streamlit as st
import sqlite3
import hashlib
import pandas as pd
import base64
from datetime import datetime

def get_base64_image(image_path):
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode('utf-8')

def show_dashboard():
    # ----- Ph·∫ßn header v·ªõi logo PTIT -----
    col1, col2 = st.columns([1, 4])
    with col1:
        # Logo PTIT (thay b·∫±ng URL h√¨nh ·∫£nh th·ª±c t·∫ø c·ªßa b·∫°n)
        st.image("https://www.google.com/url?sa=i&url=https%3A%2F%2Fdownloadlogomienphi.com%2Flogo%2Fdownload-logo-vector-hoc-vien-cong-nghe-buu-chinh-vien-thong-ptit-mien-phi&psig=AOvVaw0-7dXW-7Ou0xPEgU7csBQI&ust=1743920545834000&source=images&cd=vfe&opi=89978449&ved=0CBUQjRxqFwoTCNC27LagwIwDFQAAAAAdAAAAABAE"
                 , width=120)
    with col2:
        st.title("H·ªÜ TH·ªêNG QU·∫¢N L√ù K√ù T√öC X√Å")
        st.markdown("**D·ªäCH V·ª§ S·ªê D√ÄNH CHO SINH VI√äN L∆ØU TR√ö**")
    
    st.divider()
    
    # ----- 4 ch·ªâ s·ªë ch√≠nh -----
    st.subheader("üìä TH·ªêNG K√ä NHANH")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("T·ªïng sinh vi√™n", 150, "+5 so v·ªõi th√°ng tr∆∞·ªõc")
    with col2:
        st.metric("Ph√≤ng ƒëang s·ª≠ d·ª•ng", "85/120", "71% l·∫•p ƒë·∫ßy")
    with col3:
        st.metric("Doanh thu th√°ng", "45,200,000‚Ç´", "+12%")
    with col4:
        st.metric("H√≥a ƒë∆°n ch·ªù", 8, "2 qu√° h·∫°n")

    # ----- Bi·ªÉu ƒë·ªì -----
    st.subheader("üìà BI·ªÇU ƒê·ªí TH·ªêNG K√ä")
    tab1, tab2 = st.tabs(["DOANH THU", "PH√ÇN B·ªî PH√íNG"])
    
    with tab1:
        # D·ªØ li·ªáu m·∫´u - thay b·∫±ng query t·ª´ database
        revenue_data = pd.DataFrame({
            'Th√°ng': ['1/2024', '2/2024', '3/2024', '4/2024'],
            'Doanh thu': [42000000, 38000000, 45000000, 45200000]
        })
        st.bar_chart(revenue_data.set_index('Th√°ng'))
        
    with tab2:
        room_data = pd.DataFrame({
            'Lo·∫°i ph√≤ng': ['ƒê∆°n', 'ƒê√¥i', '4 ng∆∞·ªùi'],
            'S·ªë l∆∞·ª£ng': [30, 60, 30],
            'Tr·ªëng': [5, 10, 8]
        })
        st.bar_chart(room_data.set_index('Lo·∫°i ph√≤ng'))

    # ----- C·∫£nh b√°o -----
    st.subheader("‚ö†Ô∏è C·∫¢NH B√ÅO H·ªÜ TH·ªêNG")
    
    with st.expander("H√≥a ƒë∆°n ch∆∞a thanh to√°n (5)"):
        # D·ªØ li·ªáu m·∫´u
        overdue_invoices = pd.DataFrame({
            'M√£ h√≥a ƒë∆°n': ['INV2024001', 'INV2024002', 'INV2024005'],
            'Sinh vi√™n': ['Nguy·ªÖn VƒÉn A', 'Tr·∫ßn Th·ªã B', 'L√™ VƒÉn C'],
            'S·ªë ti·ªÅn': [1500000, 1800000, 2000000],
            'H·∫°n thanh to√°n': ['15/04/2024', '20/04/2024', '25/04/2024'],
            'Tr·∫°ng th√°i': ['Qu√° h·∫°n', 'S·∫Øp h·∫øt h·∫°n', 'S·∫Øp h·∫øt h·∫°n']
        })
        st.dataframe(overdue_invoices, hide_index=True, use_container_width=True)
    
    with st.expander("Ph√≤ng s·∫Øp h·∫øt h·ª£p ƒë·ªìng (3)"):
        expiring_rooms = pd.DataFrame({
            'Ph√≤ng': ['A101', 'B205', 'C302'],
            'T√≤a nh√†': ['A', 'B', 'C'],
            'S·ªë SV': [1, 2, 4],
            'H·∫°n h·ª£p ƒë·ªìng': ['30/04/2024', '02/05/2024', '05/05/2024']
        })
        st.dataframe(expiring_rooms, hide_index=True, use_container_width=True)

    # ----- Footer -----
    st.divider()
    st.caption("¬© 2024 H·ªçc vi·ªán C√¥ng ngh·ªá B∆∞u ch√≠nh Vi·ªÖn th√¥ng - Ph√°t tri·ªÉn b·ªüi Nh√≥m SV Khoa VT1")

# ----- Database Setup -----
def init_db():
    conn = sqlite3.connect('ktx.db')
    c = conn.cursor()
    
    # B·∫£ng t√†i kho·∫£n
    c.execute('''CREATE TABLE IF NOT EXISTS accounts (
                 username TEXT PRIMARY KEY,
                 password TEXT,
                 role TEXT CHECK(role IN ('student', 'staff', 'admin'))
              )''')
    
    # B·∫£ng sinh vi√™n
    c.execute('''CREATE TABLE IF NOT EXISTS students (
                 student_id TEXT PRIMARY KEY,
                 full_name TEXT NOT NULL,
                 dob DATE,
                 phone TEXT,
                 class TEXT,
                 room_id TEXT
              )''')
    
    # B·∫£ng nh√¢n vi√™n
    c.execute('''CREATE TABLE IF NOT EXISTS staff (
                 staff_id TEXT PRIMARY KEY,
                 full_name TEXT NOT NULL,
                 position TEXT,
                 department TEXT
              )''')
    
    # B·∫£ng ph√≤ng
    c.execute('''CREATE TABLE IF NOT EXISTS rooms (
                 room_id TEXT PRIMARY KEY,
                 type TEXT,
                 capacity INTEGER,
                 current_occupancy INTEGER DEFAULT 0,
                 amenities TEXT,
                 status TEXT DEFAULT 'available'
              )''')
    
    # B·∫£ng h√≥a ƒë∆°n
    c.execute('''CREATE TABLE IF NOT EXISTS invoices (
                 invoice_id TEXT PRIMARY KEY,
                 student_id TEXT,
                 amount REAL,
                 issue_date DATE,
                 due_date DATE,
                 status TEXT DEFAULT 'unpaid',
                 FOREIGN KEY(student_id) REFERENCES students(student_id)
              )''')
    
    # T√†i kho·∫£n admin m·∫∑c ƒë·ªãnh
    c.execute("INSERT OR IGNORE INTO accounts VALUES (?,?,?)", 
              ("admin", hash_password("admin123"), "admin"))
    conn.commit()
    conn.close()

# ----- Helper Functions -----
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def authenticate(username, password):
    conn = sqlite3.connect('ktx.db')
    c = conn.cursor()
    c.execute("SELECT * FROM accounts WHERE username=? AND password=?", 
              (username, hash_password(password)))
    result = c.fetchone()
    conn.close()
    return result

def get_db_connection():
    return sqlite3.connect('ktx.db')

# ----- Authentication -----
def login_page():
    # Custom CSS t·ªëi gi·∫£n
    st.markdown("""
    <style>
        .login-container {
            max-width: 400px;
            margin: 0 auto;
            padding: 2rem;
            border-radius: 2px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            background: white;
            margin-top: 0.5vh;
        }
        .ptit-logo {
            display: block;
            margin: 0 auto 1rem;
            height: 60px;
        }
        .login-title {
            text-align: center;
            color: #0062cc;
            margin-bottom: 0.5rem;
            font-size: 1.5rem;
            font-weight: bold;
        }
        .login-subtitle {
            text-align: center;
            color: red;
            margin-bottom: 2rem;
            font-size: 0.9rem;
        }
        .stTextInput>div>div>input {
            padding: 10px;
            border-radius: 4px;
        }
        .stButton>button {
            width: 100%;
            padding: 10px;
            background: #0062cc;
            color: white;
            border: none;
            border-radius: 4px;
            font-weight: bold;
        }
        .forgot-link {
            text-align: right;
            margin-top: -10px;
            margin-bottom: 1rem;
        }
        .forgot-link a {
            color: #0062cc;
            font-size: 0.8rem;
            text-decoration: none;
        }
        .footer {
            text-align: center;
            margin-top: 2rem;
            color: #666;
            font-size: 0.8rem;
        }
    </style>
    """, unsafe_allow_html=True)

    # Container ch√≠nh
    with st.container():
        col1, col2 = st.columns([1, 10], gap="medium")
        with col1:
            st.image("images/Logo_PTIT.png", width=120, output_format="auto")
        with col2:
            st.markdown("""
            <div class="login-container">
                <div class="login-title">H·ªÜ TH·ªêNG QU·∫¢N L√ù K√ù T√öC X√Å</div>
                <div class="login-subtitle">D·ªäCH V·ª§ S·ªê D√ÄNH CHO SINH VI√äN L∆ØU TR√ö</div>
            """, unsafe_allow_html=True)

        # Form ƒëƒÉng nh·∫≠p
        with st.form("login_form"):
            username = st.text_input("T√™n ƒëƒÉng nh·∫≠p", placeholder="Username")
            password = st.text_input("M·∫≠t kh·∫©u", type="password", placeholder="Password")
            
            st.markdown('<div class="forgot-link"><a href="#">Qu√™n m·∫≠t kh·∫©u?</a></div>', unsafe_allow_html=True)
            
            if st.form_submit_button("ƒêƒÇNG NH·∫¨P", use_container_width=True):
                user = authenticate(username, password)
                if user:
                    st.session_state.user = user
                    st.rerun()
                else:
                    st.error("T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c")

        st.markdown("""
            <div class="footer">
                ¬© 2025 H·ªçc vi·ªán C√¥ng ngh·ªá B∆∞u ch√≠nh Vi·ªÖn th√¥ng<br>
                Phi√™n b·∫£n 1.0.0
            </div>
        </div>
        """, unsafe_allow_html=True)

    # ·∫®n c√°c element kh√¥ng c·∫ßn thi·∫øt
    hide_streamlit_style = """
        <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
        </style>
    """
    st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# ----- Student Management -----
def student_management():
    st.header("üë®‚Äçüéì Qu·∫£n l√Ω Sinh vi√™n")
    tab1, tab2, tab3, tab4 = st.tabs(["Th√™m SV", "C·∫≠p nh·∫≠t TT", "Danh s√°ch SV", "X√≥a SV"])
    
    with tab1:
        with st.form("add_student"):
            st.subheader("Th√™m sinh vi√™n m·ªõi")
            student_id = st.text_input("M√£ SV*")
            full_name = st.text_input("H·ªç t√™n*")
            dob = st.date_input("Ng√†y sinh")
            phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i")
            student_class = st.text_input("L·ªõp")
            
            if st.form_submit_button("L∆∞u"):
                if not student_id or not full_name:
                    st.error("Vui l√≤ng nh·∫≠p c√°c tr∆∞·ªùng b·∫Øt bu·ªôc (*)")
                else:
                    try:
                        conn = get_db_connection()
                        conn.execute("INSERT INTO students VALUES (?,?,?,?,?,NULL)", 
                                    (student_id, full_name, dob, phone, student_class))
                        conn.commit()
                        st.success("Th√™m sinh vi√™n th√†nh c√¥ng!")
                    except sqlite3.IntegrityError:
                        st.error("M√£ sinh vi√™n ƒë√£ t·ªìn t·∫°i!")
                    finally:
                        conn.close()
    
    with tab2:
        conn = get_db_connection()
        students = conn.execute("SELECT student_id, full_name FROM students").fetchall()
        conn.close()
        
        selected_student = st.selectbox("Ch·ªçn sinh vi√™n", 
                                      [f"{s[0]} - {s[1]}" for s in students])
        
        if selected_student:
            student_id = selected_student.split(" - ")[0]
            conn = get_db_connection()
            student = conn.execute("SELECT * FROM students WHERE student_id=?", 
                                 (student_id,)).fetchone()
            conn.close()
            
            with st.form("update_student"):
                new_phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i m·ªõi", value=student[3])
                new_class = st.text_input("L·ªõp m·ªõi", value=student[4])
                
                if st.form_submit_button("C·∫≠p nh·∫≠t"):
                    conn = get_db_connection()
                    conn.execute("UPDATE students SET phone=?, class=? WHERE student_id=?", 
                               (new_phone, new_class, student_id))
                    conn.commit()
                    conn.close()
                    st.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!")

    with tab3:
        conn = get_db_connection()
        df = pd.read_sql("SELECT * FROM students", conn)
        conn.close()
        st.dataframe(df)
    with tab4:
        conn = get_db_connection()
        students = conn.execute("SELECT student_id, full_name FROM students").fetchall()
        conn.close()
        
        selected_student = st.selectbox("Ch·ªçn sinh vi√™n c·∫ßn x√≥a", 
                                      [f"{s[0]} - {s[1]}" for s in students],
                                      key="delete_student_select")
        
        if selected_student and st.button("X√≥a sinh vi√™n", key="delete_student_btn"):
            student_id = selected_student.split(" - ")[0]
            try:
                conn = get_db_connection()
                
                # Ki·ªÉm tra r√†ng bu·ªôc tr∆∞·ªõc khi x√≥a
                has_invoice = conn.execute("SELECT 1 FROM invoices WHERE student_id=?", 
                                         (student_id,)).fetchone()
                if has_invoice:
                    st.warning("Kh√¥ng th·ªÉ x√≥a v√¨ sinh vi√™n c√≥ h√≥a ƒë∆°n li√™n quan!")
                else:
                    conn.execute("DELETE FROM students WHERE student_id=?", (student_id,))
                    conn.commit()
                    st.success("ƒê√£ x√≥a sinh vi√™n th√†nh c√¥ng!")
                    st.rerun()
            except Exception as e:
                st.error(f"L·ªói khi x√≥a: {str(e)}")
            finally:
                conn.close()

# ----- Staff Management -----
def staff_management():
    if st.session_state.user[2] != 'admin':
        st.warning("Ch·ªâ qu·∫£n tr·ªã vi√™n ƒë∆∞·ª£c truy c·∫≠p")
        return
    
    st.header("üëî Qu·∫£n l√Ω Nh√¢n vi√™n")
    tab1, tab2, tab3 = st.tabs(["Th√™m NV", "Danh s√°ch NV", "X√≥a NV"])
    
    with tab1:
        with st.form("add_staff"):
            staff_id = st.text_input("M√£ nh√¢n vi√™n*")
            full_name = st.text_input("H·ªç t√™n*")
            position = st.selectbox("Ch·ª©c v·ª•", ["Qu·∫£n l√Ω", "Nh√¢n vi√™n", "B·∫£o v·ªá"])
            department = st.text_input("Ph√≤ng ban")
            
            if st.form_submit_button("L∆∞u"):
                if not staff_id or not full_name:
                    st.error("Vui l√≤ng nh·∫≠p c√°c tr∆∞·ªùng b·∫Øt bu·ªôc (*)")
                else:
                    try:
                        conn = get_db_connection()
                        # Th√™m v√†o b·∫£ng staff
                        conn.execute("INSERT INTO staff VALUES (?,?,?,?)", 
                                    (staff_id, full_name, position, department))
                        # T·∫°o t√†i kho·∫£n ƒëƒÉng nh·∫≠p
                        conn.execute("INSERT INTO accounts VALUES (?,?,?)", 
                                    (staff_id, hash_password("123456"), "staff"))
                        conn.commit()
                        st.success(f"ƒê√£ th√™m nh√¢n vi√™n {full_name}!")
                    except sqlite3.IntegrityError:
                        st.error("M√£ nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i!")
                    finally:
                        conn.close()
    
    with tab2:
        conn = get_db_connection()
        df = pd.read_sql("SELECT * FROM staff", conn)
        conn.close()
        st.dataframe(df)
    
    with tab3:
        conn = get_db_connection()
        staff_list = conn.execute("SELECT staff_id, full_name FROM staff").fetchall()
        conn.close()
        
        selected_staff = st.selectbox("Ch·ªçn nh√¢n vi√™n c·∫ßn x√≥a", 
                                    [f"{s[0]} - {s[1]}" for s in staff_list],
                                    key="delete_staff_select")
        
        if selected_staff and st.button("X√≥a nh√¢n vi√™n", key="delete_staff_btn"):
            staff_id = selected_staff.split(" - ")[0]
            try:
                conn = get_db_connection()
                
                # X√≥a c·∫£ t√†i kho·∫£n ƒëƒÉng nh·∫≠p
                conn.execute("DELETE FROM staff WHERE staff_id=?", (staff_id,))
                conn.execute("DELETE FROM accounts WHERE username=?", (staff_id,))
                conn.commit()
                st.success("ƒê√£ x√≥a nh√¢n vi√™n th√†nh c√¥ng!")
                st.rerun()
            except Exception as e:
                st.error(f"L·ªói khi x√≥a: {str(e)}")
            finally:
                conn.close()

# ----- Room Management -----
def room_management():
    st.header("üè† Qu·∫£n l√Ω Ph√≤ng ·ªü")
    tab1, tab2, tab3, tab4 = st.tabs(["Th√™m ph√≤ng", "ƒêƒÉng k√Ω ph√≤ng", "DS ph√≤ng", "X√≥a ph√≤ng"])
    
    with tab1:
        with st.form("add_room"):
            room_id = st.text_input("M√£ ph√≤ng*")
            room_type = st.selectbox("Lo·∫°i ph√≤ng*", ["Ph√≤ng ƒë∆°n", "Ph√≤ng ƒë√¥i", "Ph√≤ng 4 ng∆∞·ªùi"])
            capacity = st.number_input("S·ª©c ch·ª©a*", min_value=1, value=2)
            amenities = st.multiselect("Ti·ªán nghi", ["ƒêi·ªÅu h√≤a", "N√≥ng l·∫°nh", "Wifi", "T·ªß l·∫°nh"])
            
            if st.form_submit_button("Th√™m ph√≤ng"):
                if not room_id:
                    st.error("Vui l√≤ng nh·∫≠p m√£ ph√≤ng")
                else:
                    try:
                        conn = get_db_connection()
                        conn.execute("INSERT INTO rooms (room_id, type, capacity, amenities) VALUES (?,?,?,?)",
                                   (room_id, room_type, capacity, ",".join(amenities)))
                        conn.commit()
                        st.success("Th√™m ph√≤ng th√†nh c√¥ng!")
                    except sqlite3.IntegrityError:
                        st.error("M√£ ph√≤ng ƒë√£ t·ªìn t·∫°i!")
                    finally:
                        conn.close()
    
    with tab2:
        conn = get_db_connection()
        students = conn.execute("SELECT student_id, full_name FROM students WHERE room_id IS NULL").fetchall()
        rooms = conn.execute("SELECT room_id FROM rooms WHERE status='available'").fetchall()
        conn.close()
        
        with st.form("assign_room"):
            student = st.selectbox("Ch·ªçn sinh vi√™n", [f"{s[0]} - {s[1]}" for s in students])
            room = st.selectbox("Ch·ªçn ph√≤ng", [r[0] for r in rooms])
            
            if st.form_submit_button("ƒêƒÉng k√Ω ph√≤ng"):
                student_id = student.split(" - ")[0]
                try:
                    conn = get_db_connection()
                    # C·∫≠p nh·∫≠t ph√≤ng cho sinh vi√™n
                    conn.execute("UPDATE students SET room_id=? WHERE student_id=?", 
                               (room, student_id))
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng
                    conn.execute("UPDATE rooms SET current_occupancy = current_occupancy + 1 WHERE room_id=?", 
                               (room,))
                    conn.commit()
                    st.success("ƒêƒÉng k√Ω ph√≤ng th√†nh c√¥ng!")
                except Exception as e:
                    st.error(f"L·ªói: {str(e)}")
                finally:
                    conn.close()
    
    with tab3:
        conn = get_db_connection()
        df = pd.read_sql("SELECT * FROM rooms", conn)
        conn.close()
        st.dataframe(df)
    
    with tab4:
        conn = get_db_connection()
        rooms = conn.execute("SELECT room_id FROM rooms WHERE current_occupancy = 0").fetchall()
        conn.close()
        
        selected_room = st.selectbox("Ch·ªçn ph√≤ng tr·ªëng c·∫ßn x√≥a", 
                                   [r[0] for r in rooms],
                                   key="delete_room_select")
        
        if selected_room and st.button("X√≥a ph√≤ng", key="delete_room_btn"):
            try:
                conn = get_db_connection()
                conn.execute("DELETE FROM rooms WHERE room_id=?", (selected_room,))
                conn.commit()
                st.success("ƒê√£ x√≥a ph√≤ng th√†nh c√¥ng!")
                st.rerun()
            except Exception as e:
                st.error(f"L·ªói khi x√≥a: {str(e)}")
            finally:
                conn.close()

# ----- Invoice Management -----
def invoice_management():
    st.header("üí∞ Qu·∫£n l√Ω H√≥a ƒë∆°n")
    tab1, tab2, tab3 = st.tabs(["T·∫°o h√≥a ƒë∆°n", "Thanh to√°n", "X√≥a h√≥a ƒë∆°n"])
    
    with tab1:
        conn = get_db_connection()
        students = conn.execute("SELECT student_id, full_name FROM students").fetchall()
        conn.close()
        
        with st.form("create_invoice"):
            student = st.selectbox("Ch·ªçn sinh vi√™n", [f"{s[0]} - {s[1]}" for s in students])
            amount = st.number_input("S·ªë ti·ªÅn*", min_value=0)
            due_date = st.date_input("H·∫°n thanh to√°n*")
            
            if st.form_submit_button("T·∫°o h√≥a ƒë∆°n"):
                student_id = student.split(" - ")[0]
                invoice_id = f"INV{datetime.now().strftime('%Y%m%d%H%M%S')}"
                try:
                    conn = get_db_connection()
                    conn.execute("INSERT INTO invoices VALUES (?,?,?,?,?,?)",
                               (invoice_id, student_id, amount, datetime.now().date(), due_date, "unpaid"))
                    conn.commit()
                    st.success(f"ƒê√£ t·∫°o h√≥a ƒë∆°n {invoice_id}")
                except Exception as e:
                    st.error(f"L·ªói: {str(e)}")
                finally:
                    conn.close()
    
    with tab2:
        conn = get_db_connection()
        invoices = conn.execute('''SELECT i.invoice_id, s.full_name, i.amount, i.due_date, i.status 
                                FROM invoices i JOIN students s ON i.student_id = s.student_id''').fetchall()
        conn.close()
        
        selected_invoice = st.selectbox("Ch·ªçn h√≥a ƒë∆°n", 
                                      [f"{inv[0]} - {inv[1]} - {inv[2]}ƒë - {inv[4]}" for inv in invoices])
        
        if selected_invoice and st.button("ƒê√°nh d·∫•u ƒë√£ thanh to√°n"):
            invoice_id = selected_invoice.split(" - ")[0]
            try:
                conn = get_db_connection()
                conn.execute("UPDATE invoices SET status='paid' WHERE invoice_id=?", (invoice_id,))
                conn.commit()
                st.success("C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!")
                st.rerun()
            except Exception as e:
                st.error(f"L·ªói: {str(e)}")
            finally:
                conn.close()
        
    with tab3:
        conn = get_db_connection()
        invoices = conn.execute('''SELECT i.invoice_id, s.full_name, i.amount 
                                FROM invoices i JOIN students s ON i.student_id = s.student_id
                                WHERE i.status='unpaid' ''').fetchall()
        conn.close()
        
        selected_invoice = st.selectbox("Ch·ªçn h√≥a ƒë∆°n ch∆∞a thanh to√°n c·∫ßn x√≥a", 
                                      [f"{inv[0]} - {inv[1]} - {inv[2]}ƒë" for inv in invoices],
                                      key="delete_invoice_select")
        
        if selected_invoice and st.button("X√≥a h√≥a ƒë∆°n", key="delete_invoice_btn"):
            invoice_id = selected_invoice.split(" - ")[0]
            try:
                conn = get_db_connection()
                conn.execute("DELETE FROM invoices WHERE invoice_id=?", (invoice_id,))
                conn.commit()
                st.success("ƒê√£ x√≥a h√≥a ƒë∆°n th√†nh c√¥ng!")
                st.rerun()
            except Exception as e:
                st.error(f"L·ªói khi x√≥a: {str(e)}")
            finally:
                conn.close()

# ----- Report -----
def report():
    st.header("üìä B√°o c√°o th·ªëng k√™")
    
    conn = get_db_connection()
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Th·ªëng k√™ ph√≤ng")
        room_stats = pd.read_sql('''
            SELECT type, COUNT(*) as total, 
                   SUM(CASE WHEN status='available' THEN 1 ELSE 0 END) as available
            FROM rooms
            GROUP BY type
        ''', conn)
        st.dataframe(room_stats)
        
    with col2:
        st.subheader("Doanh thu")
        revenue = pd.read_sql('''
            SELECT strftime('%Y-%m', issue_date) as month,
                   SUM(CASE WHEN status='paid' THEN amount ELSE 0 END) as paid,
                   SUM(CASE WHEN status='unpaid' THEN amount ELSE 0 END) as unpaid
            FROM invoices
            GROUP BY month
        ''', conn)
        st.dataframe(revenue)
    
    if st.button("Xu·∫•t b√°o c√°o"):
        with st.spinner("ƒêang t·∫°o b√°o c√°o..."):
            report_data = pd.read_sql('''
                SELECT s.student_id, s.full_name, r.room_id, 
                       i.amount, i.status, i.due_date
                FROM students s
                LEFT JOIN rooms r ON s.room_id = r.room_id
                LEFT JOIN invoices i ON s.student_id = i.student_id
            ''', conn)
            
            st.download_button(
                label="T·∫£i xu·ªëng Excel",
                data=report_data.to_csv(index=False).encode('utf-8'),
                file_name="bao_cao_ktx.csv",
                mime="text/csv"
            )
    
    conn.close()

# ----- Main App -----
def main():
    st.set_page_config(
        page_title="H·ªá th·ªëng QL KTX",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    init_db()
    
    if 'user' not in st.session_state:
        login_page()
    else:
        st.sidebar.title(f"Xin ch√†o {st.session_state.user[0]}")
        if st.sidebar.button("ƒêƒÉng xu·∫•t"):
            del st.session_state.user
            st.rerun()
        
        menu_options = {
            "Dashboard": show_dashboard,
            "Qu·∫£n l√Ω Sinh vi√™n": student_management,
            "Qu·∫£n l√Ω Nh√¢n vi√™n": staff_management,
            "Qu·∫£n l√Ω Ph√≤ng ·ªü": room_management,
            "Qu·∫£n l√Ω H√≥a ƒë∆°n": invoice_management,
            "B√°o c√°o": report
        }
        
        selected = st.sidebar.selectbox("Menu", list(menu_options.keys()))
        menu_options[selected]()

if __name__ == "__main__":
    main()
